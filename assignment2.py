# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0, 0.36, 1.28, 1.56, 2.84, 3.16])
keys.append([[0.0291081, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.00369544, [3, -0.12, 0], [3, 0.306667, 0]], [0.0398422, [3, -0.306667, -0.0435376], [3, 0.0933333, 0.0132506]], [0.220536, [3, -0.0933333, 0], [3, 0.426667, 0]], [-0.288555, [3, -0.426667, 0], [3, 0.106667, 0]], [-0.000947839, [3, -0.106667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0, 0.36, 1.28, 1.56, 2.84, 3.16])
keys.append([[0.0633989, [3, -0.0133333, 0], [3, 0.12, 0]], [0.0074309, [3, -0.12, 0], [3, 0.306667, 0]], [0.0583338, [3, -0.306667, -0.0143699], [3, 0.0933333, 0.00437344]], [0.0636609, [3, -0.0933333, -0.0053271], [3, 0.426667, 0.0243524]], [0.474878, [3, -0.426667, 0], [3, 0.106667, 0]], [0.00190593, [3, -0.106667, 0], [3, 0, 0]]])

names.append("HipPitch")
times.append([0, 2.84])
keys.append([[-0.118706, [3, -0.0133333, 0], [3, 0.946667, 0]], [-0.11438, [3, -0.946667, 0], [3, 0, 0]]])

names.append("HipRoll")
times.append([0, 2.84])
keys.append([[0.00855997, [3, -0.0133333, 0], [3, 0.946667, 0]], [0.00830019, [3, -0.946667, 0], [3, 0, 0]]])

names.append("KneePitch")
times.append([0, 2.84])
keys.append([[0.00920607, [3, -0.0133333, 0], [3, 0.946667, 0]], [0.00757548, [3, -0.946667, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.343971, [3, -0.133333, 0], [3, 0.28, 0]], [0.076658, [3, -0.28, 0], [3, 0.346667, 0]], [0.0352399, [3, -0.346667, 0.0414181], [3, 0.306667, -0.0366391]], [-0.348453, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.00564129, [3, -0.133333, 0], [3, 0.28, 0]], [-0.076658, [3, -0.28, 0.0133186], [3, 0.346667, -0.0164897]], [-0.095066, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.00564129, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[-0.195915, [3, -0.0133333, 0], [3, 0.12, 0]], [-1.00294, [3, -0.12, 0.0606734], [3, 0.626667, -0.31685]], [-1.32849, [3, -0.626667, 0], [3, 0.2, 0]], [-0.192951, [3, -0.2, 0], [3, 0.106667, 0]], [-1.00745, [3, -0.106667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[-1.43297, [3, -0.0133333, 0], [3, 0.12, 0]], [-1.39094, [3, -0.12, -0.0236812], [3, 0.626667, 0.123668]], [-0.990921, [3, -0.626667, 0], [3, 0.2, 0]], [-1.43685, [3, -0.2, 0], [3, 0.106667, 0]], [-1.39094, [3, -0.106667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[0.496125, [3, -0.0133333, 0], [3, 0.12, 0]], [0.253935, [3, -0.12, 0.0160727], [3, 0.626667, -0.083935]], [0.17, [3, -0.626667, 0], [3, 0.2, 0]], [0.501481, [3, -0.2, 0], [3, 0.106667, 0]], [0.251009, [3, -0.106667, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.45, [3, -0.133333, 0], [3, 0.28, 0]], [0.182588, [3, -0.28, -0.0879688], [3, 0.346667, 0.108914]], [0.291501, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.447024, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[0.00464495, [3, -0.133333, 0], [3, 0.28, 0]], [0.0337899, [3, -0.28, -0.0109663], [3, 0.346667, 0.0135773]], [0.0782759, [3, -0.346667, 0], [3, 0.306667, 0]], [0.000314163, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.00481924, [3, -0.133333, 0], [3, 0.28, 0]], [-0.318715, [3, -0.28, 0], [3, 0.346667, 0]], [-0.307977, [3, -0.346667, -0.0107373], [3, 0.306667, 0.00949835]], [-0.00123608, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[0.699999, [3, -0.133333, 0], [3, 0.28, 0]], [-0.0874801, [3, -0.28, 0], [3, 0.346667, 0]], [-0.0874801, [3, -0.346667, 0], [3, 0.306667, 0]], [0.69684, [3, -0.306667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[1.6024, [3, -0.0133333, 0], [3, 0.12, 0]], [1.40883, [3, -0.12, 0.00246046], [3, 0.626667, -0.0128491]], [1.39598, [3, -0.626667, 0], [3, 0.2, 0]], [1.60194, [3, -0.2, 0], [3, 0.106667, 0]], [1.40319, [3, -0.106667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[0.0863551, [3, -0.0133333, 0], [3, 0.12, 0]], [0.29209, [3, -0.12, 0], [3, 0.626667, 0]], [-0.226893, [3, -0.626667, 0], [3, 0.2, 0]], [0.0796533, [3, -0.2, -0.113921], [3, 0.106667, 0.0607581]], [0.297146, [3, -0.106667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0, 0.36, 2.24, 2.84, 3.16])
keys.append([[-0.381082, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.00228773, [3, -0.12, 0], [3, 0.626667, 0]], [-0.245399, [3, -0.626667, 0.0932405], [3, 0.2, -0.0297576]], [-0.371282, [3, -0.2, 0], [3, 0.106667, 0]], [-0.00228773, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.343875, [3, -0.133333, 0], [3, 0.28, 0]], [0.0798099, [3, -0.28, 0], [3, 0.346667, 0]], [0.0414601, [3, -0.346667, 0.0383498], [3, 0.306667, -0.0339248]], [-0.348429, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[0, [3, -0.133333, 0], [3, 0.28, 0]], [0.174919, [3, -0.28, 0], [3, 0.346667, 0]], [0.168782, [3, -0.346667, 0.00613659], [3, 0.306667, -0.00542852]], [0, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[0.202551, [3, -0.0133333, 0], [3, 0.12, 0]], [1.0128, [3, -0.12, -0.0286114], [3, 0.32, 0.076297]], [1.0891, [3, -0.32, -0.0504686], [3, 0.36, 0.0567772]], [1.33454, [3, -0.36, 0], [3, 0.146667, 0]], [0.202408, [3, -0.146667, 0], [3, 0.106667, 0]], [1.01036, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[1.48521, [3, -0.0133333, 0], [3, 0.12, 0]], [1.38107, [3, -0.12, 0], [3, 0.32, 0]], [1.41746, [3, -0.32, 0], [3, 0.36, 0]], [0.964928, [3, -0.36, 0], [3, 0.146667, 0]], [1.48123, [3, -0.146667, 0], [3, 0.106667, 0]], [1.38678, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[0.538586, [3, -0.0133333, 0], [3, 0.12, 0]], [0.257116, [3, -0.12, 0], [3, 0.32, 0]], [0.6972, [3, -0.32, 0], [3, 0.36, 0]], [0.17, [3, -0.36, 0], [3, 0.146667, 0]], [0.541725, [3, -0.146667, 0], [3, 0.106667, 0]], [0.250481, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.45, [3, -0.133333, 0], [3, 0.28, 0]], [0.164096, [3, -0.28, -0.104076], [3, 0.346667, 0.128856]], [0.292952, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.447019, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-5.82076e-11, [3, -0.133333, 0], [3, 0.28, 0]], [-0.193243, [3, -0.28, 0], [3, 0.346667, 0]], [-0.190175, [3, -0.346667, -0.00306828], [3, 0.306667, 0.00271425]], [-0.000763273, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[-0.00481924, [3, -0.133333, 0], [3, 0.28, 0]], [-0.318715, [3, -0.28, 0], [3, 0.346667, 0]], [-0.307977, [3, -0.346667, -0.0107373], [3, 0.306667, 0.00949835]], [-0.00123608, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.36, 1.2, 2.24, 3.16])
keys.append([[0.699999, [3, -0.133333, 0], [3, 0.28, 0]], [-0.0827939, [3, -0.28, 0], [3, 0.346667, 0]], [-0.0827939, [3, -0.346667, 0], [3, 0.306667, 0]], [0.696858, [3, -0.306667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[1.58812, [3, -0.0133333, 0], [3, 0.12, 0]], [1.40807, [3, -0.12, 0.0137667], [3, 0.32, -0.0367113]], [1.37135, [3, -0.32, 0.00409109], [3, 0.36, -0.00460248]], [1.36675, [3, -0.36, 0], [3, 0.146667, 0]], [1.60044, [3, -0.146667, 0], [3, 0.106667, 0]], [1.40291, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[-0.0724568, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.297238, [3, -0.12, 0], [3, 0.32, 0]], [0.021518, [3, -0.32, -0.0822166], [3, 0.36, 0.0924937]], [0.226893, [3, -0.36, 0], [3, 0.146667, 0]], [-0.0780822, [3, -0.146667, 0.101148], [3, 0.106667, -0.0735623]], [-0.297238, [3, -0.106667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
keys.append([[0.368221, [3, -0.0133333, 0], [3, 0.12, 0]], [0.0011095, [3, -0.12, 0], [3, 0.32, 0]], [0.788519, [3, -0.32, 0], [3, 0.36, 0]], [0.24088, [3, -0.36, 0], [3, 0.146667, 0]], [0.355195, [3, -0.146667, 0], [3, 0.106667, 0]], [0.000789966, [3, -0.106667, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###


import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


###


# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.36, 0.68, 1, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.16417, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0506146, [3, -0.106667, -0.0523781], [3, 0.106667, 0.0523781]], [0.150098, [3, -0.106667, 0], [3, 0.0666667, 0]], [-0.132645, [3, -0.0666667, 0], [3, 0.146667, 0]], [0.164061, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.038392, [3, -0.106667, 0.0159534], [3, 0.133333, -0.0199418]], [-0.0583338, [3, -0.133333, 0], [3, 0.2, 0]], [0.00105402, [3, -0.2, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.00190593, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0245859, [3, -0.106667, 0.0132985], [3, 0.173333, -0.0216101]], [-0.10282, [3, -0.173333, 0.0216039], [3, 0.146667, -0.0182802]], [-0.144238, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0951499, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0951499, [3, -0.133333, 0], [3, 0.2, 0]], [-0.000495831, [3, -0.2, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.0874194, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0106959, [3, -0.106667, 0], [3, 0.173333, 0]], [0.0199001, [3, -0.173333, -0.00858615], [3, 0.146667, 0.00726521]], [0.05825, [3, -0.146667, -0.0207225], [3, 0.106667, 0.0150709]], [0.12728, [3, -0.106667, -0.013181], [3, 0.133333, 0.0164763]], [0.147222, [3, -0.133333, 0], [3, 0.2, 0]], [-0.348343, [3, -0.2, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.106994, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0383082, [3, -0.106667, -0.0139814], [3, 0.173333, 0.0227198]], [0.00310993, [3, -0.173333, -0.0116329], [3, 0.146667, 0.00984319]], [0.0261199, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0383082, [3, -0.106667, 0.00613588], [3, 0.133333, -0.00766985]], [-0.0459781, [3, -0.133333, 0], [3, 0.2, 0]], [0.000184546, [3, -0.2, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.426396, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.42811, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.623083, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.737812, [3, -0.146667, 0.0807558], [3, 0.106667, -0.0587315]], [-1.04154, [3, -0.106667, 0.0554513], [3, 0.133333, -0.0693141]], [-1.11211, [3, -0.133333, 0], [3, 0.2, 0]], [-1.01106, [3, -0.2, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-1.20326, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.18429, [3, -0.106667, 0], [3, 0.173333, 0]], [-1.19503, [3, -0.173333, 0.0107391], [3, 0.146667, -0.0090869]], [-1.25025, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.971065, [3, -0.106667, -0.0331347], [3, 0.133333, 0.0414184]], [-0.929646, [3, -0.133333, 0], [3, 0.2, 0]], [-1.38691, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.3, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0984, [3, -0.106667, 0], [3, 0.173333, 0]], [0.84, [3, -0.173333, 0], [3, 0.146667, 0]], [0.7, [3, -0.146667, 0.0779649], [3, 0.106667, -0.0567018]], [0.436, [3, -0.106667, 0.04256], [3, 0.133333, -0.0532]], [0.3828, [3, -0.133333, 0.0246648], [3, 0.2, -0.0369972]], [0.251014, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.127419, [3, -0.133333, 0], [3, 0.106667, 0]], [0.446436, [3, -0.106667, 0], [3, 0.173333, 0]], [0.216335, [3, -0.173333, 0], [3, 0.146667, 0]], [0.296104, [3, -0.146667, 0], [3, 0.106667, 0]], [0.237812, [3, -0.106667, 0.0106812], [3, 0.133333, -0.0133514]], [0.224006, [3, -0.133333, 0.0138055], [3, 0.2, -0.0207083]], [-0.447122, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.115024, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0598679, [3, -0.106667, 0.0144061], [3, 0.173333, -0.0234099]], [0.00157595, [3, -0.173333, 0.0135716], [3, 0.146667, -0.0114837]], [-0.0152981, [3, -0.146667, 0], [3, 0.106667, 0]], [0.0690719, [3, -0.106667, -0.0154537], [3, 0.133333, 0.0193171]], [0.0890141, [3, -0.133333, 0], [3, 0.2, 0]], [0.00920885, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.164179, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.315962, [3, -0.106667, 0.0188796], [3, 0.173333, -0.0306794]], [-0.346642, [3, -0.173333, 0.00543925], [3, 0.146667, -0.00460244]], [-0.351244, [3, -0.146667, 0.00148032], [3, 0.106667, -0.00107659]], [-0.354312, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.34971, [3, -0.133333, -0.00460244], [3, 0.2, 0.00690366]], [-0.000947972, [3, -0.2, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.0923279, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0813439, [3, -0.106667, -0.0109841], [3, 0.173333, 0.0178491]], [0.0398422, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.073674, [3, -0.146667, 0.00210921], [3, 0.106667, -0.00153397]], [-0.075208, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0706061, [3, -0.133333, -0.00460191], [3, 0.2, 0.00690286]], [0.696833, [3, -0.2, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[1.43959, [3, -0.133333, 0], [3, 0.106667, 0]], [1.07222, [3, -0.106667, 0.074207], [3, 0.173333, -0.120586]], [0.855211, [3, -0.173333, 0], [3, 0.146667, 0]], [0.89428, [3, -0.146667, -0.0390692], [3, 0.106667, 0.0284139]], [1.20261, [3, -0.106667, 0], [3, 0.133333, 0]], [1.18881, [3, -0.133333, 0], [3, 0.2, 0]], [1.40108, [3, -0.2, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.217095, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0260359, [3, -0.106667, 0.0160479], [3, 0.173333, -0.0260779]], [-4.19617e-05, [3, -0.173333, 0], [3, 0.146667, 0]], [0.00149202, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.00924586, [3, -0.106667, 0.00477245], [3, 0.133333, -0.00596556]], [-0.030722, [3, -0.133333, 0], [3, 0.2, 0]], [0.302787, [3, -0.2, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.0991345, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.918909, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.90817, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.918909, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.101286, [3, -0.106667, -0.157718], [3, 0.133333, 0.197148]], [0.145688, [3, -0.133333, 0], [3, 0.2, 0]], [-0.00079804, [3, -0.2, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.0874194, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0398422, [3, -0.106667, 0.00283194], [3, 0.173333, -0.00460191]], [-0.0444441, [3, -0.173333, 0], [3, 0.146667, 0]], [0.0445281, [3, -0.146667, -0.0233868], [3, 0.106667, 0.0170086]], [0.0767419, [3, -0.106667, -0.00659052], [3, 0.133333, 0.00823815]], [0.0890141, [3, -0.133333, 0], [3, 0.2, 0]], [-0.34838, [3, -0.2, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.10699, [3, -0.133333, 0], [3, 0.106667, 0]], [0.131966, [3, -0.106667, -0.00434039], [3, 0.173333, 0.00705313]], [0.14117, [3, -0.173333, -0.00332367], [3, 0.146667, 0.00281233]], [0.150374, [3, -0.146667, 0], [3, 0.106667, 0]], [0.0813439, [3, -0.106667, 0.0136356], [3, 0.133333, -0.0170445]], [0.0583338, [3, -0.133333, 0.0107982], [3, 0.2, -0.0161972]], [0.000357662, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.426396, [3, -0.133333, 0], [3, 0.106667, 0]], [0.874422, [3, -0.106667, -0.0151043], [3, 0.173333, 0.0245446]], [0.898967, [3, -0.173333, -0.009417], [3, 0.146667, 0.00796823]], [0.926578, [3, -0.146667, 0], [3, 0.106667, 0]], [0.733295, [3, -0.106667, 0.0196357], [3, 0.133333, -0.0245446]], [0.70875, [3, -0.133333, 0], [3, 0.2, 0]], [1.01104, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[1.20326, [3, -0.133333, 0], [3, 0.106667, 0]], [1.38363, [3, -0.106667, -0.0386825], [3, 0.173333, 0.0628591]], [1.50788, [3, -0.173333, -0.032683], [3, 0.146667, 0.0276548]], [1.56464, [3, -0.146667, 0], [3, 0.106667, 0]], [1.53396, [3, -0.106667, 0], [3, 0.133333, 0]], [1.53549, [3, -0.133333, 0], [3, 0.2, 0]], [1.38692, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.298285, [3, -0.133333, 0], [3, 0.106667, 0]], [0.5008, [3, -0.106667, 0], [3, 0.173333, 0]], [0.28, [3, -0.173333, 0.0651444], [3, 0.146667, -0.0551222]], [0.14, [3, -0.146667, 0], [3, 0.106667, 0]], [0.1532, [3, -0.106667, 0], [3, 0.133333, 0]], [0.1532, [3, -0.133333, 0], [3, 0.2, 0]], [0.251035, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.127419, [3, -0.133333, 0], [3, 0.106667, 0]], [0.48398, [3, -0.106667, 0], [3, 0.173333, 0]], [0.220854, [3, -0.173333, 0], [3, 0.146667, 0]], [0.322099, [3, -0.146667, 0], [3, 0.106667, 0]], [0.292952, [3, -0.106667, 0.00245464], [3, 0.133333, -0.00306829]], [0.289883, [3, -0.133333, 0.00306829], [3, 0.2, -0.00460244]], [-0.44708, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.115018, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.205514, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.18097, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.205514, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.095066, [3, -0.106667, -0.0134992], [3, 0.133333, 0.016874]], [-0.078192, [3, -0.133333, -0.0119439], [3, 0.2, 0.0179158]], [-0.00548688, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.164179, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.315962, [3, -0.106667, 0.0188796], [3, 0.173333, -0.0306794]], [-0.346642, [3, -0.173333, 0.00543925], [3, 0.146667, -0.00460244]], [-0.351244, [3, -0.146667, 0.00148032], [3, 0.106667, -0.00107659]], [-0.354312, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.34971, [3, -0.133333, -0.00460244], [3, 0.2, 0.00690366]], [-0.000947972, [3, -0.2, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.0923279, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0904641, [3, -0.106667, -0.00186384], [3, 0.173333, 0.00302874]], [0.0813439, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.0827939, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0735901, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.076658, [3, -0.133333, 0], [3, 0.2, 0]], [0.696819, [3, -0.2, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[1.43959, [3, -0.133333, 0], [3, 0.106667, 0]], [1.80863, [3, -0.106667, -0.00566024], [3, 0.173333, 0.00919789]], [1.81783, [3, -0.173333, -0.00609144], [3, 0.146667, 0.00515429]], [1.84237, [3, -0.146667, 0], [3, 0.106667, 0]], [1.8071, [3, -0.106667, 0], [3, 0.133333, 0]], [1.81783, [3, -0.133333, 0], [3, 0.2, 0]], [1.40106, [3, -0.2, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[-0.217095, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.119694, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.145772, [3, -0.173333, 0.00664733], [3, 0.146667, -0.00562466]], [-0.15651, [3, -0.146667, 0.00414451], [3, 0.106667, -0.00301419]], [-0.167248, [3, -0.106667, 0.00613591], [3, 0.133333, -0.00766988]], [-0.197927, [3, -0.133333, 0.0180634], [3, 0.2, -0.0270952]], [-0.302724, [3, -0.2, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
keys.append([[0.0991345, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0767419, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.0767419, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.0767419, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0767419, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0767419, [3, -0.133333, 0], [3, 0.2, 0]], [0.000773579, [3, -0.2, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err

###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[0.00382405, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.237276, [3, -0.186667, 0], [3, 0.2, 0]], [0.139619, [3, -0.2, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.00273226, [3, -0.146667, 0], [3, 0.186667, 0]], [0.47822, [3, -0.186667, 0], [3, 0.2, 0]], [0.000183582, [3, -0.2, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.349205, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.349205, [3, -0.186667, 0], [3, 0.2, 0]], [-0.353337, [3, -0.2, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.00210886, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00210886, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00717596, [3, -0.2, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.4, 0.96, 1.56, 1.96])
keys.append([[-0.0349066, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.0377672, [3, -0.186667, 0.000795501], [3, 0.2, -0.000852323]], [-0.0398501, [3, -0.2, 0.00117321], [3, 0.133333, -0.00078214]], [-0.0436332, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.4, 0.96, 1.56])
keys.append([[-1.32121, [3, -0.146667, 0], [3, 0.186667, 0]], [-1.32465, [3, -0.186667, 0.00103779], [3, 0.2, -0.00111192]], [-1.32766, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.4, 0.96, 1.56, 1.96])
keys.append([[1, [3, -0.146667, 0], [3, 0.186667, 0]], [1, [3, -0.186667, 0], [3, 0.2, 0]], [1, [3, -0.2, 0], [3, 0.133333, 0]], [0.24, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.448977, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.448977, [3, -0.186667, 0], [3, 0.2, 0]], [-0.439961, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[0.00210885, [3, -0.146667, 0], [3, 0.186667, 0]], [0.00210885, [3, -0.186667, 0], [3, 0.2, 0]], [0.00717597, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[4.6764e-07, [3, -0.146667, 0], [3, 0.186667, 0]], [4.6764e-07, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00624238, [3, -0.2, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.4, 0.96, 1.56])
keys.append([[0.698409, [3, -0.146667, 0], [3, 0.186667, 0]], [0.698409, [3, -0.186667, 0], [3, 0.2, 0]], [0.705014, [3, -0.2, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.652753, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.651641, [3, -0.186667, -0.0011118], [3, 0.2, 0.00119122]], [-0.645843, [3, -0.2, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[0.333358, [3, -0.146667, 0], [3, 0.186667, 0]], [0.325254, [3, -0.186667, 0], [3, 0.2, 0]], [0.325464, [3, -0.2, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.4, 0.96, 1.56])
keys.append([[0.34732, [3, -0.146667, 0], [3, 0.186667, 0]], [0.341001, [3, -0.186667, 0], [3, 0.2, 0]], [0.343643, [3, -0.2, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.349205, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.349205, [3, -0.186667, 0], [3, 0.2, 0]], [-0.356386, [3, -0.2, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.00210857, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00210857, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00717629, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[1.00287, [3, -0.146667, 0], [3, 0.186667, 0]], [1.00287, [3, -0.186667, 0], [3, 0.2, 0]], [1.00158, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.4, 0.96, 1.56])
keys.append([[1.38994, [3, -0.146667, 0], [3, 0.186667, 0]], [1.38994, [3, -0.186667, 0], [3, 0.2, 0]], [1.39986, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.4, 0.96, 1.56])
keys.append([[0.249432, [3, -0.146667, 0], [3, 0.186667, 0]], [0.249432, [3, -0.186667, 0], [3, 0.2, 0]], [0.254726, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.448977, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.448977, [3, -0.186667, 0], [3, 0.2, 0]], [-0.443605, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[0.00210858, [3, -0.146667, 0], [3, 0.186667, 0]], [0.00210858, [3, -0.186667, 0], [3, 0.2, 0]], [0.00717632, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[4.6764e-07, [3, -0.146667, 0], [3, 0.186667, 0]], [4.6764e-07, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00624238, [3, -0.2, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.4, 0.96, 1.56])
keys.append([[0.698409, [3, -0.146667, 0], [3, 0.186667, 0]], [0.698409, [3, -0.186667, 0], [3, 0.2, 0]], [0.703643, [3, -0.2, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.4, 0.96, 1.56])
keys.append([[1.39983, [3, -0.146667, 0], [3, 0.186667, 0]], [1.39983, [3, -0.186667, 0], [3, 0.2, 0]], [1.40307, [3, -0.2, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.298921, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.298921, [3, -0.186667, 0], [3, 0.2, 0]], [-0.300296, [3, -0.2, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.4, 0.96, 1.56])
keys.append([[-0.00732502, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00732502, [3, -0.186667, 0], [3, 0.2, 0]], [-0.0170866, [3, -0.2, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.56, 1.04, 1.56, 2.56, 3.16, 3.64, 4.16, 4.76, 5.44, 6.16, 6.64, 7.16, 8.16, 9.36])
keys.append([[-0.00182335, [3, -0.2, 0], [3, 0.16, 0]], [-0.0946028, [3, -0.16, 0.0317656], [3, 0.173333, -0.0344128]], [-0.200359, [3, -0.173333, 0.0397653], [3, 0.333333, -0.0764717]], [-0.443314, [3, -0.333333, 0], [3, 0.2, 0]], [-0.00911907, [3, -0.2, 0], [3, 0.16, 0]], [-0.0946028, [3, -0.16, 0], [3, 0.173333, 0]], [0.0959931, [3, -0.173333, 0], [3, 0.2, 0]], [-0.443314, [3, -0.2, 0], [3, 0.226667, 0]], [0.0998937, [3, -0.226667, 0], [3, 0.24, 0]], [-0.00182335, [3, -0.24, 0.0388993], [3, 0.16, -0.0259329]], [-0.0946028, [3, -0.16, 0.0317656], [3, 0.173333, -0.0344128]], [-0.200359, [3, -0.173333, 0.0397653], [3, 0.333333, -0.0764717]], [-0.443314, [3, -0.333333, 0], [3, 0.4, 0]], [-0.0946028, [3, -0.4, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.56, 1.04, 1.56, 2.56, 3.16, 3.64, 4.16, 4.76, 5.44, 6.16, 6.64, 7.16, 8.16, 9.36])
keys.append([[0.00215833, [3, -0.2, 0], [3, 0.16, 0]], [-0.10472, [3, -0.16, 0], [3, 0.173333, 0]], [0.362477, [3, -0.173333, 0], [3, 0.333333, 0]], [-0.102654, [3, -0.333333, 0.116916], [3, 0.2, -0.0701494]], [-0.198718, [3, -0.2, 0], [3, 0.16, 0]], [-0.10472, [3, -0.16, -0.0896002], [3, 0.173333, 0.0970669]], [0.361283, [3, -0.173333, 0], [3, 0.2, 0]], [-0.102654, [3, -0.2, 0], [3, 0.226667, 0]], [0.361283, [3, -0.226667, 0], [3, 0.24, 0]], [0.00215833, [3, -0.24, 0.0932006], [3, 0.16, -0.0621337]], [-0.10472, [3, -0.16, 0], [3, 0.173333, 0]], [0.362477, [3, -0.173333, 0], [3, 0.333333, 0]], [-0.102654, [3, -0.333333, 0.00172162], [3, 0.4, -0.00206595]], [-0.10472, [3, -0.4, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.56, 1.56, 2.56, 3.16, 4.76, 5.44, 6.16, 7.16, 8.16])
keys.append([[-0.0436332, [3, -0.2, 0], [3, 0.333333, 0]], [-0.0436332, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0436332, [3, -0.333333, 0], [3, 0.2, 0]], [-0.0436332, [3, -0.2, 0], [3, 0.533333, 0]], [-0.0436332, [3, -0.533333, 0], [3, 0.226667, 0]], [-0.0436332, [3, -0.226667, 0], [3, 0.24, 0]], [-0.0436332, [3, -0.24, 0], [3, 0.333333, 0]], [-0.0436332, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0436332, [3, -0.333333, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.56, 1.56, 2.56, 3.16, 4.76, 5.44, 6.16, 7.16, 8.16])
keys.append([[0.24, [3, -0.2, 0], [3, 0.333333, 0]], [0.24, [3, -0.333333, 0], [3, 0.333333, 0]], [0.24, [3, -0.333333, 0], [3, 0.2, 0]], [0.24, [3, -0.2, 0], [3, 0.533333, 0]], [0.24, [3, -0.533333, 0], [3, 0.226667, 0]], [0.24, [3, -0.226667, 0], [3, 0.24, 0]], [0.24, [3, -0.24, 0], [3, 0.333333, 0]], [0.24, [3, -0.333333, 0], [3, 0.333333, 0]], [0.24, [3, -0.333333, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload()
#
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.outputX(0.0)
            self.outputY(0.0)
            self.outputTheta(0.0)

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.update)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def update(self):
        with self.lock:
            self.outputX(self.getParameter("X"))
            self.outputY(self.getParameter("Y"))
            self.outputTheta(self.getParameter("Theta"))
            self.outputStepFrequency(self.getParameter("Step frequency"))

            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()

##
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        footGaitConfigMin = self.motion.getMoveConfig("Min")
        footGaitConfigMax = self.motion.getMoveConfig("Max")
        self.dFootGaitConfig = {}
        for i in range(len(footGaitConfigMin)):
            # [0] = key ("MaxStepX" for ex)
            # [1] = min
            # [2] = max
            self.dFootGaitConfig[footGaitConfigMin[i][0]] = [footGaitConfigMin[i][1], footGaitConfigMax[i][1]]
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        self.stepFrequency = 0.0
        self.enableArms = []
        self.enableFootContact = None
        self.bIsRunning = False

    def onUnload(self):
        self.motion.stopMove()
        self.bIsRunning = False

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()

    def onInput_x(self, p):
        self.bIsRunning = True
        self.x = p
        self.sendNewWalkTarget()

    def onInput_y(self, p):
        self.bIsRunning = True
        self.y = p
        self.sendNewWalkTarget()

    def onInput_theta(self, p):
        self.bIsRunning = True
        self.theta = p
        self.sendNewWalkTarget()

    def onInput_stepFrequency(self, p):
        self.stepFrequency = p
        self.sendNewWalkTarget()

    def initializeWalk(self):
        enableArms = [self.getParameter("Left arm enabled"),
                              self.getParameter("Right arm enabled")]
        enableFootContact = self.getParameter("Stop walk when foot contact is lost")
        for k, v in self.dFootGaitConfig.iteritems():
            for unit in ["m", "rad", "%"]:
                try: # try for each unit and do nothing if value in gaitConfig but not in parameters
                    param = self.getParameter( str(k) + " (" + unit + ")" )
                    if( unit == "%" ):
                        param = param / 100.
                    if( len(v) == 2 ):
                        v.append( param )
                    else:
                        v[2] = param
                    break
                except:
                    pass
        if( self.enableArms != enableArms ):
            self.enableArms = enableArms
            self.motion.setMoveArmsEnabled( self.enableArms[0], self.enableArms[1] )
        if( self.enableFootContact != enableFootContact ):
            self.enableFootContact = enableFootContact
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION",self.enableFootContact]])

    def sendNewWalkTarget(self):
        self.initializeWalk()
        moveConfig = []
        for k, v in self.dFootGaitConfig.iteritems():
            try:
                moveConfig.append( [k, v[2]] )
            except: # if some value added in moveConfig but not in parameters
                pass
        moveConfig.append( ["Frequency", self.stepFrequency] )
        self.motion.moveToward(self.x, self.y, self.theta, moveConfig)


###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([1.12, 1.48, 1.76])
keys.append([[0.320001, [3, -0.386667, 0], [3, 0.12, 0]], [0.320001, [3, -0.12, 0], [3, 0.0933333, 0]], [1.4998, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([1.12, 1.48, 1.76])
keys.append([[0.213675, [3, -0.386667, 0], [3, 0.12, 0]], [0.213675, [3, -0.12, 0], [3, 0.0933333, 0]], [0.221746, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([1.12, 1.48, 1.76])
keys.append([[-1.28088, [3, -0.386667, 0], [3, 0.12, 0]], [-1.27775, [3, -0.12, 0], [3, 0.0933333, 0]], [-1.54462, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([1.12, 1.48, 1.76])
keys.append([[0.0761061, [3, -0.386667, 0], [3, 0.12, 0]], [0.0997951, [3, -0.12, -0.023689], [3, 0.0933333, 0.0184248]], [0.270526, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LHand")
times.append([1.12, 1.48, 1.76])
keys.append([[0.999157, [3, -0.386667, 0], [3, 0.12, 0]], [0.999157, [3, -0.12, 0], [3, 0.0933333, 0]], [1, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([1.12, 1.48, 1.76])
keys.append([[0.807669, [3, -0.386667, 0], [3, 0.12, 0]], [0.8199, [3, -0.12, -0.0122312], [3, 0.0933333, 0.00951318]], [1.09781, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([1.12, 1.48, 1.76])
keys.append([[-0.0218384, [3, -0.386667, 0], [3, 0.12, 0]], [0.000706195, [3, -0.12, 0], [3, 0.0933333, 0]], [-0.314159, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([1.12, 1.48, 1.76])
keys.append([[-0.124805, [3, -0.386667, 0], [3, 0.12, 0]], [-0.124805, [3, -0.12, 0], [3, 0.0933333, 0]], [-0.125664, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([1.12, 1.48, 1.76])
keys.append([[1.19209, [3, -0.386667, 0], [3, 0.12, 0]], [1.19209, [3, -0.12, 0], [3, 0.0933333, 0]], [1.19555, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([1.12, 1.48, 1.76])
keys.append([[0.555835, [3, -0.386667, 0], [3, 0.12, 0]], [0.650798, [3, -0.12, 0], [3, 0.0933333, 0]], [0.546288, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RHand")
times.append([1.12, 1.48, 1.76])
keys.append([[0.38, [3, -0.386667, 0], [3, 0.12, 0]], [0.38, [3, -0.12, 0], [3, 0.0933333, 0]], [0.38, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([1.12, 1.48, 1.76])
keys.append([[0.42268, [3, -0.386667, 0], [3, 0.12, 0]], [0.857625, [3, -0.12, -0.10728], [3, 0.0933333, 0.0834396]], [0.994838, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([1.12, 1.48, 1.76])
keys.append([[0.139884, [3, -0.386667, 0], [3, 0.12, 0]], [0.0401722, [3, -0.12, 0], [3, 0.0933333, 0]], [0.158825, [3, -0.0933333, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([1.12, 1.48, 1.76])
keys.append([[-0.115334, [3, -0.386667, 0], [3, 0.12, 0]], [-0.115334, [3, -0.12, 0], [3, 0.0933333, 0]], [-0.111701, [3, -0.0933333, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.225334, [3, -0.24, 0], [3, 0.226667, 0]], [-0.200118, [3, -0.226667, -0.0252165], [3, 0.146667, 0.0163166]], [0.0338946, [3, -0.146667, 0], [3, 0.24, 0]], [-0.335103, [3, -0.24, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.457259, [3, -0.24, 0], [3, 0.226667, 0]], [0.734714, [3, -0.226667, 0], [3, 0.146667, 0]], [0.0349171, [3, -0.146667, 0.022839], [3, 0.24, -0.0373729]], [-0.00245589, [3, -0.24, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.348661, [3, -0.24, 0], [3, 0.226667, 0]], [-0.348661, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.348661, [3, -0.146667, 0], [3, 0.24, 0]], [-0.348661, [3, -0.24, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.00461636, [3, -0.24, 0], [3, 0.226667, 0]], [-0.00461636, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.00461636, [3, -0.146667, 0], [3, 0.24, 0]], [-0.00461636, [3, -0.24, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-1.41703, [3, -0.24, 0], [3, 0.226667, 0]], [-1.41703, [3, -0.226667, 0], [3, 0.146667, 0]], [-1.41703, [3, -0.146667, 0], [3, 0.24, 0]], [-1.40891, [3, -0.24, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-1.38092, [3, -0.24, 0], [3, 0.226667, 0]], [-1.38092, [3, -0.226667, 0], [3, 0.146667, 0]], [-1.38092, [3, -0.146667, 0], [3, 0.24, 0]], [-1.38092, [3, -0.24, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.170224, [3, -0.24, 0], [3, 0.226667, 0]], [0.995287, [3, -0.226667, 0], [3, 0.146667, 0]], [0.62, [3, -0.146667, 2.75009e-05], [3, 0.24, -4.50015e-05]], [0.619955, [3, -0.24, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.441293, [3, -0.24, 0], [3, 0.226667, 0]], [-0.441293, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.441293, [3, -0.146667, 0], [3, 0.24, 0]], [-0.441293, [3, -0.24, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.00643098, [3, -0.24, 0], [3, 0.226667, 0]], [0.00643098, [3, -0.226667, 0], [3, 0.146667, 0]], [0.00643098, [3, -0.146667, 0], [3, 0.24, 0]], [0.00643098, [3, -0.24, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-7.3364e-05, [3, -0.24, 0], [3, 0.226667, 0]], [-7.3364e-05, [3, -0.226667, 0], [3, 0.146667, 0]], [-7.3364e-05, [3, -0.146667, 0], [3, 0.24, 0]], [-7.3364e-05, [3, -0.24, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.704595, [3, -0.24, 0], [3, 0.226667, 0]], [0.704595, [3, -0.226667, 0], [3, 0.146667, 0]], [0.704595, [3, -0.146667, 0], [3, 0.24, 0]], [0.704595, [3, -0.24, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.0134741, [3, -0.24, 0], [3, 0.226667, 0]], [-0.0134741, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.0134741, [3, -0.146667, 0], [3, 0.24, 0]], [-0.0134741, [3, -0.24, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.464031, [3, -0.24, 0], [3, 0.226667, 0]], [0.464031, [3, -0.226667, 0], [3, 0.146667, 0]], [0.464031, [3, -0.146667, 0], [3, 0.24, 0]], [0.464031, [3, -0.24, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.674819, [3, -0.24, 0], [3, 0.226667, 0]], [-0.674819, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.674819, [3, -0.146667, 0], [3, 0.24, 0]], [-0.674819, [3, -0.24, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.349111, [3, -0.24, 0], [3, 0.226667, 0]], [-0.349111, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.349111, [3, -0.146667, 0], [3, 0.24, 0]], [-0.349111, [3, -0.24, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.00510692, [3, -0.24, 0], [3, 0.226667, 0]], [-0.00510692, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.00510692, [3, -0.146667, 0], [3, 0.24, 0]], [-0.00510692, [3, -0.24, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.997847, [3, -0.24, 0], [3, 0.226667, 0]], [0.997847, [3, -0.226667, 0], [3, 0.146667, 0]], [0.997847, [3, -0.146667, 0], [3, 0.24, 0]], [0.997847, [3, -0.24, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[1.39669, [3, -0.24, 0], [3, 0.226667, 0]], [1.39669, [3, -0.226667, 0], [3, 0.146667, 0]], [1.39669, [3, -0.146667, 0], [3, 0.24, 0]], [1.39669, [3, -0.24, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.250991, [3, -0.24, 0], [3, 0.226667, 0]], [0.250991, [3, -0.226667, 0], [3, 0.146667, 0]], [0.250991, [3, -0.146667, 0], [3, 0.24, 0]], [0.250991, [3, -0.24, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.448166, [3, -0.24, 0], [3, 0.226667, 0]], [-0.448166, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.448166, [3, -0.146667, 0], [3, 0.24, 0]], [-0.448166, [3, -0.24, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.000987176, [3, -0.24, 0], [3, 0.226667, 0]], [-0.000987176, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.000987176, [3, -0.146667, 0], [3, 0.24, 0]], [-0.000987176, [3, -0.24, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-7.3364e-05, [3, -0.24, 0], [3, 0.226667, 0]], [-7.3364e-05, [3, -0.226667, 0], [3, 0.146667, 0]], [-7.3364e-05, [3, -0.146667, 0], [3, 0.24, 0]], [-7.3364e-05, [3, -0.24, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[0.703595, [3, -0.24, 0], [3, 0.226667, 0]], [0.703595, [3, -0.226667, 0], [3, 0.146667, 0]], [0.703595, [3, -0.146667, 0], [3, 0.24, 0]], [0.703595, [3, -0.24, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[1.4031, [3, -0.24, 0], [3, 0.226667, 0]], [1.4031, [3, -0.226667, 0], [3, 0.146667, 0]], [1.4031, [3, -0.146667, 0], [3, 0.24, 0]], [1.4031, [3, -0.24, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.29982, [3, -0.24, 0], [3, 0.226667, 0]], [-0.29982, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.29982, [3, -0.146667, 0], [3, 0.24, 0]], [-0.29982, [3, -0.24, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.68, 1.36, 1.8, 2.52])
keys.append([[-0.00832985, [3, -0.24, 0], [3, 0.226667, 0]], [-0.00832985, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.00832985, [3, -0.146667, 0], [3, 0.24, 0]], [-0.00832985, [3, -0.24, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()

###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.56, 0.88, 1.68, 2.32, 3.08, 3.92, 4.72, 5.96])
keys.append([[-0.312554, [3, -0.2, 0], [3, 0.106667, 0]], [-0.202333, [3, -0.106667, 0], [3, 0.266667, 0]], [-0.205289, [3, -0.266667, 0.00295659], [3, 0.213333, -0.00236527]], [-0.312554, [3, -0.213333, 0], [3, 0.253333, 0]], [-0.290997, [3, -0.253333, 0], [3, 0.28, 0]], [-0.290997, [3, -0.28, 0], [3, 0.266667, 0]], [0.0479161, [3, -0.266667, 0], [3, 0.413333, 0]], [0.0479161, [3, -0.413333, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.56, 0.88, 1.68, 2.32, 3.08, 3.92, 4.72, 5.96])
keys.append([[-0.00998609, [3, -0.2, 0], [3, 0.106667, 0]], [0.431096, [3, -0.106667, 0], [3, 0.266667, 0]], [-0.593412, [3, -0.266667, 0], [3, 0.213333, 0]], [-0.00998609, [3, -0.213333, -0.244794], [3, 0.253333, 0.290693]], [1.01305, [3, -0.253333, 0], [3, 0.28, 0]], [1.01305, [3, -0.28, 0], [3, 0.266667, 0]], [-0.70386, [3, -0.266667, 0], [3, 0.413333, 0]], [-0.70386, [3, -0.413333, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload()

#

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.outputX(0.0)
            self.outputY(0.0)
            self.outputTheta(0.0)

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.update)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def update(self):
        with self.lock:
            self.outputX(self.getParameter("X"))
            self.outputY(self.getParameter("Y"))
            self.outputTheta(self.getParameter("Theta"))
            self.outputStepFrequency(self.getParameter("Step frequency"))

            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()


##

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        footGaitConfigMin = self.motion.getMoveConfig("Min")
        footGaitConfigMax = self.motion.getMoveConfig("Max")
        self.dFootGaitConfig = {}
        for i in range(len(footGaitConfigMin)):
            # [0] = key ("MaxStepX" for ex)
            # [1] = min
            # [2] = max
            self.dFootGaitConfig[footGaitConfigMin[i][0]] = [footGaitConfigMin[i][1], footGaitConfigMax[i][1]]
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        self.stepFrequency = 0.0
        self.enableArms = []
        self.enableFootContact = None
        self.bIsRunning = False

    def onUnload(self):
        self.motion.stopMove()
        self.bIsRunning = False

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()

    def onInput_x(self, p):
        self.bIsRunning = True
        self.x = p
        self.sendNewWalkTarget()

    def onInput_y(self, p):
        self.bIsRunning = True
        self.y = p
        self.sendNewWalkTarget()

    def onInput_theta(self, p):
        self.bIsRunning = True
        self.theta = p
        self.sendNewWalkTarget()

    def onInput_stepFrequency(self, p):
        self.stepFrequency = p
        self.sendNewWalkTarget()

    def initializeWalk(self):
        enableArms = [self.getParameter("Left arm enabled"),
                              self.getParameter("Right arm enabled")]
        enableFootContact = self.getParameter("Stop walk when foot contact is lost")
        for k, v in self.dFootGaitConfig.iteritems():
            for unit in ["m", "rad", "%"]:
                try: # try for each unit and do nothing if value in gaitConfig but not in parameters
                    param = self.getParameter( str(k) + " (" + unit + ")" )
                    if( unit == "%" ):
                        param = param / 100.
                    if( len(v) == 2 ):
                        v.append( param )
                    else:
                        v[2] = param
                    break
                except:
                    pass
        if( self.enableArms != enableArms ):
            self.enableArms = enableArms
            self.motion.setMoveArmsEnabled( self.enableArms[0], self.enableArms[1] )
        if( self.enableFootContact != enableFootContact ):
            self.enableFootContact = enableFootContact
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION",self.enableFootContact]])

    def sendNewWalkTarget(self):
        self.initializeWalk()
        moveConfig = []
        for k, v in self.dFootGaitConfig.iteritems():
            try:
                moveConfig.append( [k, v[2]] )
            except: # if some value added in moveConfig but not in parameters
                pass
        moveConfig.append( ["Frequency", self.stepFrequency] )
        self.motion.moveToward(self.x, self.y, self.theta, moveConfig)


###


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()


###

# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("LAnklePitch")
times.append([0.52, 1.08, 1.68])
keys.append([[0.22554, [3, -0.186667, 0], [3, 0.186667, 0]], [0.108956, [3, -0.186667, 0.017259], [3, 0.2, -0.0184918]], [0.0904641, [3, -0.2, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.151908, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.217869, [3, -0.186667, 0], [3, 0.2, 0]], [-0.091998, [3, -0.2, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.52, 0.84, 1.08, 1.68])
keys.append([[-0.417291, [3, -0.186667, 0], [3, 0.106667, 0]], [-0.79587, [3, -0.106667, 0.140926], [3, 0.08, -0.105695]], [-1.15715, [3, -0.08, 0], [3, 0.2, 0]], [-0.360533, [3, -0.2, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.84, 1.68])
keys.append([[-2.08567, [3, -0.293333, 0], [3, 0.28, 0]], [-1.34565, [3, -0.28, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.84, 1.68])
keys.append([[0.6724, [3, -0.293333, 0], [3, 0.28, 0]], [0.3136, [3, -0.28, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.170316, [3, -0.186667, 0], [3, 0.186667, 0]], [0.12728, [3, -0.186667, -0.00437347], [3, 0.2, 0.00468586]], [0.131966, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.52, 1.08, 1.68])
keys.append([[0.128814, [3, -0.186667, 0], [3, 0.186667, 0]], [0.245399, [3, -0.186667, 0], [3, 0.2, 0]], [0.04913, [3, -0.2, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.226991, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.176367, [3, -0.186667, 0], [3, 0.2, 0]], [-0.177901, [3, -0.2, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.0889301, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.0889301, [3, -0.186667, 0], [3, 0.2, 0]], [-0.0874801, [3, -0.2, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.84, 1.68])
keys.append([[1.00788, [3, -0.293333, 0], [3, 0.28, 0]], [1.40979, [3, -0.28, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.84, 1.08, 1.68])
keys.append([[0.127364, [3, -0.293333, 0], [3, 0.08, 0]], [0.165806, [3, -0.08, 0], [3, 0.2, 0]], [0.0767419, [3, -0.2, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.84, 1.68])
keys.append([[-1.35601, [3, -0.293333, 0], [3, 0.28, 0]], [-1.00531, [3, -0.28, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.52, 1.08, 1.68])
keys.append([[0.196309, [3, -0.186667, 0], [3, 0.186667, 0]], [0.0858622, [3, -0.186667, 0], [3, 0.2, 0]], [0.092082, [3, -0.2, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.52, 1.08, 1.68])
keys.append([[0.076658, [3, -0.186667, 0], [3, 0.186667, 0]], [0.0275701, [3, -0.186667, 0], [3, 0.2, 0]], [0.165714, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.52, 0.84, 1.08, 1.68])
keys.append([[0.42641, [3, -0.186667, 0], [3, 0.106667, 0]], [0.551524, [3, -0.106667, -0.102288], [3, 0.08, 0.0767159]], [0.963422, [3, -0.08, 0], [3, 0.2, 0]], [0.461692, [3, -0.2, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.84, 1.68])
keys.append([[1.92061, [3, -0.293333, 0], [3, 0.28, 0]], [1.34565, [3, -0.28, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.84, 1.68])
keys.append([[0.6692, [3, -0.293333, 0], [3, 0.28, 0]], [0.504, [3, -0.28, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.148756, [3, -0.186667, 0], [3, 0.186667, 0]], [0.1335, [3, -0.186667, 0], [3, 0.2, 0]], [0.12728, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.00310993, [3, -0.186667, 0], [3, 0.186667, 0]], [0.0429101, [3, -0.186667, 0], [3, 0.2, 0]], [-0.164096, [3, -0.2, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.226991, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.176367, [3, -0.186667, 0], [3, 0.2, 0]], [-0.177901, [3, -0.2, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.52, 1.08, 1.68])
keys.append([[-0.0828778, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.0828778, [3, -0.186667, 0], [3, 0.2, 0]], [-0.0873961, [3, -0.2, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.84, 1.68])
keys.append([[0.875873, [3, -0.293333, 0], [3, 0.28, 0]], [1.31613, [3, -0.28, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.84, 1.68])
keys.append([[-0.0137641, [3, -0.293333, 0], [3, 0.28, 0]], [-0.0643861, [3, -0.28, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.84, 1.68])
keys.append([[1.55092, [3, -0.293333, 0], [3, 0.28, 0]], [1.00531, [3, -0.28, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  motion = ALProxy("ALMotion", "127.0.0.1", 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err


###

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()



###



class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()


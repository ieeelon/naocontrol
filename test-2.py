from naoqi import ALProxy
import time

textSpeakProxy = ALProxy("ALTextToSpeech", "127.0.0.1", 9559)
motionProxy = ALProxy("ALMotion", "127.0.0.1", 9559)
# textSpeakProxy = ALProxy("ALTextToSpeech", "zhanat-K56CB", 37826)
# motionProxy = ALProxy("ALMotion", "zhanat-K56CB", 37826)

# 10.1.198.45
handName = "LHand"
LShoulderP = "LShoulderPitch"
LShoulderR = "LShoulderRoll"
useSen = 0
useSen2 = 0
useSen3 = 0

def SAY():
	# Choregraphe bezier export in Python.
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0, 0.36, 1.28, 1.56, 2.84, 3.16])
	keys.append([[0.0291081, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.00369544, [3, -0.12, 0], [3, 0.306667, 0]], [0.0398422, [3, -0.306667, -0.0435376], [3, 0.0933333, 0.0132506]], [0.220536, [3, -0.0933333, 0], [3, 0.426667, 0]], [-0.288555, [3, -0.426667, 0], [3, 0.106667, 0]], [-0.000947839, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0, 0.36, 1.28, 1.56, 2.84, 3.16])
	keys.append([[0.0633989, [3, -0.0133333, 0], [3, 0.12, 0]], [0.0074309, [3, -0.12, 0], [3, 0.306667, 0]], [0.0583338, [3, -0.306667, -0.0143699], [3, 0.0933333, 0.00437344]], [0.0636609, [3, -0.0933333, -0.0053271], [3, 0.426667, 0.0243524]], [0.474878, [3, -0.426667, 0], [3, 0.106667, 0]], [0.00190593, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("HipPitch")
	times.append([0, 2.84])
	keys.append([[-0.118706, [3, -0.0133333, 0], [3, 0.946667, 0]], [-0.11438, [3, -0.946667, 0], [3, 0, 0]]])

	names.append("HipRoll")
	times.append([0, 2.84])
	keys.append([[0.00855997, [3, -0.0133333, 0], [3, 0.946667, 0]], [0.00830019, [3, -0.946667, 0], [3, 0, 0]]])

	names.append("KneePitch")
	times.append([0, 2.84])
	keys.append([[0.00920607, [3, -0.0133333, 0], [3, 0.946667, 0]], [0.00757548, [3, -0.946667, 0], [3, 0, 0]]])

	names.append("LAnklePitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.343971, [3, -0.133333, 0], [3, 0.28, 0]], [0.076658, [3, -0.28, 0], [3, 0.346667, 0]], [0.0352399, [3, -0.346667, 0.0414181], [3, 0.306667, -0.0366391]], [-0.348453, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LAnkleRoll")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.00564129, [3, -0.133333, 0], [3, 0.28, 0]], [-0.076658, [3, -0.28, 0.0133186], [3, 0.346667, -0.0164897]], [-0.095066, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.00564129, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[-0.195915, [3, -0.0133333, 0], [3, 0.12, 0]], [-1.00294, [3, -0.12, 0.0606734], [3, 0.626667, -0.31685]], [-1.32849, [3, -0.626667, 0], [3, 0.2, 0]], [-0.192951, [3, -0.2, 0], [3, 0.106667, 0]], [-1.00745, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[-1.43297, [3, -0.0133333, 0], [3, 0.12, 0]], [-1.39094, [3, -0.12, -0.0236812], [3, 0.626667, 0.123668]], [-0.990921, [3, -0.626667, 0], [3, 0.2, 0]], [-1.43685, [3, -0.2, 0], [3, 0.106667, 0]], [-1.39094, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[0.496125, [3, -0.0133333, 0], [3, 0.12, 0]], [0.253935, [3, -0.12, 0.0160727], [3, 0.626667, -0.083935]], [0.17, [3, -0.626667, 0], [3, 0.2, 0]], [0.501481, [3, -0.2, 0], [3, 0.106667, 0]], [0.251009, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("LHipPitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.45, [3, -0.133333, 0], [3, 0.28, 0]], [0.182588, [3, -0.28, -0.0879688], [3, 0.346667, 0.108914]], [0.291501, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.447024, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LHipRoll")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[0.00464495, [3, -0.133333, 0], [3, 0.28, 0]], [0.0337899, [3, -0.28, -0.0109663], [3, 0.346667, 0.0135773]], [0.0782759, [3, -0.346667, 0], [3, 0.306667, 0]], [0.000314163, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LHipYawPitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.00481924, [3, -0.133333, 0], [3, 0.28, 0]], [-0.318715, [3, -0.28, 0], [3, 0.346667, 0]], [-0.307977, [3, -0.346667, -0.0107373], [3, 0.306667, 0.00949835]], [-0.00123608, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LKneePitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[0.699999, [3, -0.133333, 0], [3, 0.28, 0]], [-0.0874801, [3, -0.28, 0], [3, 0.346667, 0]], [-0.0874801, [3, -0.346667, 0], [3, 0.306667, 0]], [0.69684, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[1.6024, [3, -0.0133333, 0], [3, 0.12, 0]], [1.40883, [3, -0.12, 0.00246046], [3, 0.626667, -0.0128491]], [1.39598, [3, -0.626667, 0], [3, 0.2, 0]], [1.60194, [3, -0.2, 0], [3, 0.106667, 0]], [1.40319, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[0.0863551, [3, -0.0133333, 0], [3, 0.12, 0]], [0.29209, [3, -0.12, 0], [3, 0.626667, 0]], [-0.226893, [3, -0.626667, 0], [3, 0.2, 0]], [0.0796533, [3, -0.2, -0.113921], [3, 0.106667, 0.0607581]], [0.297146, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0, 0.36, 2.24, 2.84, 3.16])
	keys.append([[-0.381082, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.00228773, [3, -0.12, 0], [3, 0.626667, 0]], [-0.245399, [3, -0.626667, 0.0932405], [3, 0.2, -0.0297576]], [-0.371282, [3, -0.2, 0], [3, 0.106667, 0]], [-0.00228773, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RAnklePitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.343875, [3, -0.133333, 0], [3, 0.28, 0]], [0.0798099, [3, -0.28, 0], [3, 0.346667, 0]], [0.0414601, [3, -0.346667, 0.0383498], [3, 0.306667, -0.0339248]], [-0.348429, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RAnkleRoll")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[0, [3, -0.133333, 0], [3, 0.28, 0]], [0.174919, [3, -0.28, 0], [3, 0.346667, 0]], [0.168782, [3, -0.346667, 0.00613659], [3, 0.306667, -0.00542852]], [0, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[0.202551, [3, -0.0133333, 0], [3, 0.12, 0]], [1.0128, [3, -0.12, -0.0286114], [3, 0.32, 0.076297]], [1.0891, [3, -0.32, -0.0504686], [3, 0.36, 0.0567772]], [1.33454, [3, -0.36, 0], [3, 0.146667, 0]], [0.202408, [3, -0.146667, 0], [3, 0.106667, 0]], [1.01036, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[1.48521, [3, -0.0133333, 0], [3, 0.12, 0]], [1.38107, [3, -0.12, 0], [3, 0.32, 0]], [1.41746, [3, -0.32, 0], [3, 0.36, 0]], [0.964928, [3, -0.36, 0], [3, 0.146667, 0]], [1.48123, [3, -0.146667, 0], [3, 0.106667, 0]], [1.38678, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[0.538586, [3, -0.0133333, 0], [3, 0.12, 0]], [0.257116, [3, -0.12, 0], [3, 0.32, 0]], [0.6972, [3, -0.32, 0], [3, 0.36, 0]], [0.17, [3, -0.36, 0], [3, 0.146667, 0]], [0.541725, [3, -0.146667, 0], [3, 0.106667, 0]], [0.250481, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RHipPitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.45, [3, -0.133333, 0], [3, 0.28, 0]], [0.164096, [3, -0.28, -0.104076], [3, 0.346667, 0.128856]], [0.292952, [3, -0.346667, 0], [3, 0.306667, 0]], [-0.447019, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RHipRoll")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-5.82076e-11, [3, -0.133333, 0], [3, 0.28, 0]], [-0.193243, [3, -0.28, 0], [3, 0.346667, 0]], [-0.190175, [3, -0.346667, -0.00306828], [3, 0.306667, 0.00271425]], [-0.000763273, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RHipYawPitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[-0.00481924, [3, -0.133333, 0], [3, 0.28, 0]], [-0.318715, [3, -0.28, 0], [3, 0.346667, 0]], [-0.307977, [3, -0.346667, -0.0107373], [3, 0.306667, 0.00949835]], [-0.00123608, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RKneePitch")
	times.append([0.36, 1.2, 2.24, 3.16])
	keys.append([[0.699999, [3, -0.133333, 0], [3, 0.28, 0]], [-0.0827939, [3, -0.28, 0], [3, 0.346667, 0]], [-0.0827939, [3, -0.346667, 0], [3, 0.306667, 0]], [0.696858, [3, -0.306667, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[1.58812, [3, -0.0133333, 0], [3, 0.12, 0]], [1.40807, [3, -0.12, 0.0137667], [3, 0.32, -0.0367113]], [1.37135, [3, -0.32, 0.00409109], [3, 0.36, -0.00460248]], [1.36675, [3, -0.36, 0], [3, 0.146667, 0]], [1.60044, [3, -0.146667, 0], [3, 0.106667, 0]], [1.40291, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[-0.0724568, [3, -0.0133333, 0], [3, 0.12, 0]], [-0.297238, [3, -0.12, 0], [3, 0.32, 0]], [0.021518, [3, -0.32, -0.0822166], [3, 0.36, 0.0924937]], [0.226893, [3, -0.36, 0], [3, 0.146667, 0]], [-0.0780822, [3, -0.146667, 0.101148], [3, 0.106667, -0.0735623]], [-0.297238, [3, -0.106667, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0, 0.36, 1.32, 2.4, 2.84, 3.16])
	keys.append([[0.368221, [3, -0.0133333, 0], [3, 0.12, 0]], [0.0011095, [3, -0.12, 0], [3, 0.32, 0]], [0.788519, [3, -0.32, 0], [3, 0.36, 0]], [0.24088, [3, -0.36, 0], [3, 0.146667, 0]], [0.355195, [3, -0.146667, 0], [3, 0.106667, 0]], [0.000789966, [3, -0.106667, 0], [3, 0, 0]]])

	try:
	# uncomment the following line and modify the IP if you use this script outside Choregraphe.
	# motion = ALProxy("ALMotion", IP, 9559)
	# motion = ALProxy("ALMotion")
		motionProxy.angleInterpolationBezier(names, times, keys)
	except BaseException, err:
		print err

def SAY2():
	# Choregraphe bezier export in Python.
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()
	names.append("HeadPitch")
	times.append([0.36, 0.68, 1, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.16417, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0506146, [3, -0.106667, -0.0523781], [3, 0.106667, 0.0523781]], [0.150098, [3, -0.106667, 0], [3, 0.0666667, 0]], [-0.132645, [3, -0.0666667, 0], [3, 0.146667, 0]], [0.164061, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.038392, [3, -0.106667, 0.0159534], [3, 0.133333, -0.0199418]], [-0.0583338, [3, -0.133333, 0], [3, 0.2, 0]], [0.00105402, [3, -0.2, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.00190593, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0245859, [3, -0.106667, 0.0132985], [3, 0.173333, -0.0216101]], [-0.10282, [3, -0.173333, 0.0216039], [3, 0.146667, -0.0182802]], [-0.144238, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0951499, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0951499, [3, -0.133333, 0], [3, 0.2, 0]], [-0.000495831, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LAnklePitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.0874194, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0106959, [3, -0.106667, 0], [3, 0.173333, 0]], [0.0199001, [3, -0.173333, -0.00858615], [3, 0.146667, 0.00726521]], [0.05825, [3, -0.146667, -0.0207225], [3, 0.106667, 0.0150709]], [0.12728, [3, -0.106667, -0.013181], [3, 0.133333, 0.0164763]], [0.147222, [3, -0.133333, 0], [3, 0.2, 0]], [-0.348343, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LAnkleRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.106994, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0383082, [3, -0.106667, -0.0139814], [3, 0.173333, 0.0227198]], [0.00310993, [3, -0.173333, -0.0116329], [3, 0.146667, 0.00984319]], [0.0261199, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0383082, [3, -0.106667, 0.00613588], [3, 0.133333, -0.00766985]], [-0.0459781, [3, -0.133333, 0], [3, 0.2, 0]], [0.000184546, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.426396, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.42811, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.623083, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.737812, [3, -0.146667, 0.0807558], [3, 0.106667, -0.0587315]], [-1.04154, [3, -0.106667, 0.0554513], [3, 0.133333, -0.0693141]], [-1.11211, [3, -0.133333, 0], [3, 0.2, 0]], [-1.01106, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-1.20326, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.18429, [3, -0.106667, 0], [3, 0.173333, 0]], [-1.19503, [3, -0.173333, 0.0107391], [3, 0.146667, -0.0090869]], [-1.25025, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.971065, [3, -0.106667, -0.0331347], [3, 0.133333, 0.0414184]], [-0.929646, [3, -0.133333, 0], [3, 0.2, 0]], [-1.38691, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.3, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0984, [3, -0.106667, 0], [3, 0.173333, 0]], [0.84, [3, -0.173333, 0], [3, 0.146667, 0]], [0.7, [3, -0.146667, 0.0779649], [3, 0.106667, -0.0567018]], [0.436, [3, -0.106667, 0.04256], [3, 0.133333, -0.0532]], [0.3828, [3, -0.133333, 0.0246648], [3, 0.2, -0.0369972]], [0.251014, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHipPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.127419, [3, -0.133333, 0], [3, 0.106667, 0]], [0.446436, [3, -0.106667, 0], [3, 0.173333, 0]], [0.216335, [3, -0.173333, 0], [3, 0.146667, 0]], [0.296104, [3, -0.146667, 0], [3, 0.106667, 0]], [0.237812, [3, -0.106667, 0.0106812], [3, 0.133333, -0.0133514]], [0.224006, [3, -0.133333, 0.0138055], [3, 0.2, -0.0207083]], [-0.447122, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHipRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.115024, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0598679, [3, -0.106667, 0.0144061], [3, 0.173333, -0.0234099]], [0.00157595, [3, -0.173333, 0.0135716], [3, 0.146667, -0.0114837]], [-0.0152981, [3, -0.146667, 0], [3, 0.106667, 0]], [0.0690719, [3, -0.106667, -0.0154537], [3, 0.133333, 0.0193171]], [0.0890141, [3, -0.133333, 0], [3, 0.2, 0]], [0.00920885, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHipYawPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.164179, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.315962, [3, -0.106667, 0.0188796], [3, 0.173333, -0.0306794]], [-0.346642, [3, -0.173333, 0.00543925], [3, 0.146667, -0.00460244]], [-0.351244, [3, -0.146667, 0.00148032], [3, 0.106667, -0.00107659]], [-0.354312, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.34971, [3, -0.133333, -0.00460244], [3, 0.2, 0.00690366]], [-0.000947972, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LKneePitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.0923279, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0813439, [3, -0.106667, -0.0109841], [3, 0.173333, 0.0178491]], [0.0398422, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.073674, [3, -0.146667, 0.00210921], [3, 0.106667, -0.00153397]], [-0.075208, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0706061, [3, -0.133333, -0.00460191], [3, 0.2, 0.00690286]], [0.696833, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[1.43959, [3, -0.133333, 0], [3, 0.106667, 0]], [1.07222, [3, -0.106667, 0.074207], [3, 0.173333, -0.120586]], [0.855211, [3, -0.173333, 0], [3, 0.146667, 0]], [0.89428, [3, -0.146667, -0.0390692], [3, 0.106667, 0.0284139]], [1.20261, [3, -0.106667, 0], [3, 0.133333, 0]], [1.18881, [3, -0.133333, 0], [3, 0.2, 0]], [1.40108, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.217095, [3, -0.133333, 0], [3, 0.106667, 0]], [0.0260359, [3, -0.106667, 0.0160479], [3, 0.173333, -0.0260779]], [-4.19617e-05, [3, -0.173333, 0], [3, 0.146667, 0]], [0.00149202, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.00924586, [3, -0.106667, 0.00477245], [3, 0.133333, -0.00596556]], [-0.030722, [3, -0.133333, 0], [3, 0.2, 0]], [0.302787, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.0991345, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.918909, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.90817, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.918909, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.101286, [3, -0.106667, -0.157718], [3, 0.133333, 0.197148]], [0.145688, [3, -0.133333, 0], [3, 0.2, 0]], [-0.00079804, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RAnklePitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.0874194, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0398422, [3, -0.106667, 0.00283194], [3, 0.173333, -0.00460191]], [-0.0444441, [3, -0.173333, 0], [3, 0.146667, 0]], [0.0445281, [3, -0.146667, -0.0233868], [3, 0.106667, 0.0170086]], [0.0767419, [3, -0.106667, -0.00659052], [3, 0.133333, 0.00823815]], [0.0890141, [3, -0.133333, 0], [3, 0.2, 0]], [-0.34838, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RAnkleRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.10699, [3, -0.133333, 0], [3, 0.106667, 0]], [0.131966, [3, -0.106667, -0.00434039], [3, 0.173333, 0.00705313]], [0.14117, [3, -0.173333, -0.00332367], [3, 0.146667, 0.00281233]], [0.150374, [3, -0.146667, 0], [3, 0.106667, 0]], [0.0813439, [3, -0.106667, 0.0136356], [3, 0.133333, -0.0170445]], [0.0583338, [3, -0.133333, 0.0107982], [3, 0.2, -0.0161972]], [0.000357662, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.426396, [3, -0.133333, 0], [3, 0.106667, 0]], [0.874422, [3, -0.106667, -0.0151043], [3, 0.173333, 0.0245446]], [0.898967, [3, -0.173333, -0.009417], [3, 0.146667, 0.00796823]], [0.926578, [3, -0.146667, 0], [3, 0.106667, 0]], [0.733295, [3, -0.106667, 0.0196357], [3, 0.133333, -0.0245446]], [0.70875, [3, -0.133333, 0], [3, 0.2, 0]], [1.01104, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[1.20326, [3, -0.133333, 0], [3, 0.106667, 0]], [1.38363, [3, -0.106667, -0.0386825], [3, 0.173333, 0.0628591]], [1.50788, [3, -0.173333, -0.032683], [3, 0.146667, 0.0276548]], [1.56464, [3, -0.146667, 0], [3, 0.106667, 0]], [1.53396, [3, -0.106667, 0], [3, 0.133333, 0]], [1.53549, [3, -0.133333, 0], [3, 0.2, 0]], [1.38692, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.298285, [3, -0.133333, 0], [3, 0.106667, 0]], [0.5008, [3, -0.106667, 0], [3, 0.173333, 0]], [0.28, [3, -0.173333, 0.0651444], [3, 0.146667, -0.0551222]], [0.14, [3, -0.146667, 0], [3, 0.106667, 0]], [0.1532, [3, -0.106667, 0], [3, 0.133333, 0]], [0.1532, [3, -0.133333, 0], [3, 0.2, 0]], [0.251035, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.127419, [3, -0.133333, 0], [3, 0.106667, 0]], [0.48398, [3, -0.106667, 0], [3, 0.173333, 0]], [0.220854, [3, -0.173333, 0], [3, 0.146667, 0]], [0.322099, [3, -0.146667, 0], [3, 0.106667, 0]], [0.292952, [3, -0.106667, 0.00245464], [3, 0.133333, -0.00306829]], [0.289883, [3, -0.133333, 0.00306829], [3, 0.2, -0.00460244]], [-0.44708, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.115018, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.205514, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.18097, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.205514, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.095066, [3, -0.106667, -0.0134992], [3, 0.133333, 0.016874]], [-0.078192, [3, -0.133333, -0.0119439], [3, 0.2, 0.0179158]], [-0.00548688, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipYawPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.164179, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.315962, [3, -0.106667, 0.0188796], [3, 0.173333, -0.0306794]], [-0.346642, [3, -0.173333, 0.00543925], [3, 0.146667, -0.00460244]], [-0.351244, [3, -0.146667, 0.00148032], [3, 0.106667, -0.00107659]], [-0.354312, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.34971, [3, -0.133333, -0.00460244], [3, 0.2, 0.00690366]], [-0.000947972, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RKneePitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.0923279, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0904641, [3, -0.106667, -0.00186384], [3, 0.173333, 0.00302874]], [0.0813439, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.0827939, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0735901, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.076658, [3, -0.133333, 0], [3, 0.2, 0]], [0.696819, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[1.43959, [3, -0.133333, 0], [3, 0.106667, 0]], [1.80863, [3, -0.106667, -0.00566024], [3, 0.173333, 0.00919789]], [1.81783, [3, -0.173333, -0.00609144], [3, 0.146667, 0.00515429]], [1.84237, [3, -0.146667, 0], [3, 0.106667, 0]], [1.8071, [3, -0.106667, 0], [3, 0.133333, 0]], [1.81783, [3, -0.133333, 0], [3, 0.2, 0]], [1.40106, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[-0.217095, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.119694, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.145772, [3, -0.173333, 0.00664733], [3, 0.146667, -0.00562466]], [-0.15651, [3, -0.146667, 0.00414451], [3, 0.106667, -0.00301419]], [-0.167248, [3, -0.106667, 0.00613591], [3, 0.133333, -0.00766988]], [-0.197927, [3, -0.133333, 0.0180634], [3, 0.2, -0.0270952]], [-0.302724, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.36, 0.68, 1.2, 1.64, 1.96, 2.36, 2.96])
	keys.append([[0.0991345, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.0767419, [3, -0.106667, 0], [3, 0.173333, 0]], [-0.0767419, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.0767419, [3, -0.146667, 0], [3, 0.106667, 0]], [-0.0767419, [3, -0.106667, 0], [3, 0.133333, 0]], [-0.0767419, [3, -0.133333, 0], [3, 0.2, 0]], [0.000773579, [3, -0.2, 0], [3, 0, 0]]])

	try:
	# uncomment the following line and modify the IP if you use this script outside Choregraphe.
	# motion = ALProxy("ALMotion", IP, 9559)
	# motion = ALProxy("ALMotion")
		motionProxy.angleInterpolationBezier(names, times, keys)
	except BaseException, err:
		print err


def SAY3():
	# Choregraphe bezier export in Python.
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.00382405, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.237276, [3, -0.186667, 0], [3, 0.2, 0]], [0.139619, [3, -0.2, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.00273226, [3, -0.146667, 0], [3, 0.186667, 0]], [0.47822, [3, -0.186667, 0], [3, 0.2, 0]], [0.000183582, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LAnklePitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.349205, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.349205, [3, -0.186667, 0], [3, 0.2, 0]], [-0.353337, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LAnkleRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.00210886, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00210886, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00717596, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.4, 0.96, 1.56, 1.96])
	keys.append([[-0.0349066, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.0377672, [3, -0.186667, 0.000795501], [3, 0.2, -0.000852323]], [-0.0398501, [3, -0.2, 0.00117321], [3, 0.133333, -0.00078214]], [-0.0436332, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-1.32121, [3, -0.146667, 0], [3, 0.186667, 0]], [-1.32465, [3, -0.186667, 0.00103779], [3, 0.2, -0.00111192]], [-1.32766, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.4, 0.96, 1.56, 1.96])
	keys.append([[1, [3, -0.146667, 0], [3, 0.186667, 0]], [1, [3, -0.186667, 0], [3, 0.2, 0]], [1, [3, -0.2, 0], [3, 0.133333, 0]], [0.24, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHipPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.448977, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.448977, [3, -0.186667, 0], [3, 0.2, 0]], [-0.439961, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHipRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.00210885, [3, -0.146667, 0], [3, 0.186667, 0]], [0.00210885, [3, -0.186667, 0], [3, 0.2, 0]], [0.00717597, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHipYawPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[4.6764e-07, [3, -0.146667, 0], [3, 0.186667, 0]], [4.6764e-07, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00624238, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LKneePitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.698409, [3, -0.146667, 0], [3, 0.186667, 0]], [0.698409, [3, -0.186667, 0], [3, 0.2, 0]], [0.705014, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.652753, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.651641, [3, -0.186667, -0.0011118], [3, 0.2, 0.00119122]], [-0.645843, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.333358, [3, -0.146667, 0], [3, 0.186667, 0]], [0.325254, [3, -0.186667, 0], [3, 0.2, 0]], [0.325464, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.34732, [3, -0.146667, 0], [3, 0.186667, 0]], [0.341001, [3, -0.186667, 0], [3, 0.2, 0]], [0.343643, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RAnklePitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.349205, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.349205, [3, -0.186667, 0], [3, 0.2, 0]], [-0.356386, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RAnkleRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.00210857, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00210857, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00717629, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[1.00287, [3, -0.146667, 0], [3, 0.186667, 0]], [1.00287, [3, -0.186667, 0], [3, 0.2, 0]], [1.00158, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.4, 0.96, 1.56])
	keys.append([[1.38994, [3, -0.146667, 0], [3, 0.186667, 0]], [1.38994, [3, -0.186667, 0], [3, 0.2, 0]], [1.39986, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.249432, [3, -0.146667, 0], [3, 0.186667, 0]], [0.249432, [3, -0.186667, 0], [3, 0.2, 0]], [0.254726, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.448977, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.448977, [3, -0.186667, 0], [3, 0.2, 0]], [-0.443605, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.00210858, [3, -0.146667, 0], [3, 0.186667, 0]], [0.00210858, [3, -0.186667, 0], [3, 0.2, 0]], [0.00717632, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHipYawPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[4.6764e-07, [3, -0.146667, 0], [3, 0.186667, 0]], [4.6764e-07, [3, -0.186667, 0], [3, 0.2, 0]], [-0.00624238, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RKneePitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[0.698409, [3, -0.146667, 0], [3, 0.186667, 0]], [0.698409, [3, -0.186667, 0], [3, 0.2, 0]], [0.703643, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.4, 0.96, 1.56])
	keys.append([[1.39983, [3, -0.146667, 0], [3, 0.186667, 0]], [1.39983, [3, -0.186667, 0], [3, 0.2, 0]], [1.40307, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.298921, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.298921, [3, -0.186667, 0], [3, 0.2, 0]], [-0.300296, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.4, 0.96, 1.56])
	keys.append([[-0.00732502, [3, -0.146667, 0], [3, 0.186667, 0]], [-0.00732502, [3, -0.186667, 0], [3, 0.2, 0]], [-0.0170866, [3, -0.2, 0], [3, 0, 0]]])

	try:
	# uncomment the following line and modify the IP if you use this script outside Choregraphe.
	# motion = ALProxy("ALMotion", IP, 9559)
	# motion = ALProxy("ALMotion")
		motionProxy.angleInterpolationBezier(names, times, keys)
	except BaseException, err:
		print err

def demo():
	motionProxy.moveTo(0.0, 0.0, 1.57)
	motionProxy.moveTo(0.0, 0.0, -1.57)
	x = motionProxy.getAngles(handName, useSen)
	motionProxy.moveTo(x[0], 0.0, 0.0)
demo()
SAY()
textSpeakProxy.say("Hi, human! I want to come with you")
SAY2()
SAY3()
motionProxy.setMoveArmsEnabled(False, True)

while(1):

	pitch = motionProxy.getAngles(LShoulderP, useSen)
	roll = motionProxy.getAngles(LShoulderR, useSen2)
	hand = motionProxy.getAngles(handName, useSen3)
	degree_pitch = 180 * pitch[0] / 3.14
	normal_pitch = (degree_pitch + 91)/90

	degree_roll = 180 * roll[0] / 3.14
	normal_roll = (degree_roll)/18

	print("pitch: " + str(degree_pitch))	
	print("roll: " + str(degree_roll))
	print("npitch: " + str(normal_pitch))	
	print("nroll: " + str(normal_roll))
	print("Hand: " + str(hand[0]))
	if(hand[0] < 0.5):

		if((degree_pitch > -90) & (degree_pitch < 0)):
			print("Speed: " + str(normal_pitch))
			motionProxy.move(normal_pitch, 0.0, 0.0)
		else:
			print("Stop")
			motionProxy.move(0.0, 0.0, 0.0)

		if(degree_roll < -5):
		    print("Robot rolls right")
		    motionProxy.move(0.0, 0.0, normal_roll)
		elif(degree_roll > 5) & (degree_roll < 18):
		    print("Robot rolls left")
		    motionProxy.move(0.0, 0.0, normal_roll)
		else:
			print("Robot goes brrr")
	else:
		print("Stop")
		motionProxy.move(0.0, 0.0, 0.0)

	time.sleep(10)
